#!/usr/bin/perl

# workaround for dzil
package download_bca;

use 5.010;
use strict;
use warnings;

use Cwd;
use Data::Rmap qw(:all);
use File::HomeDir;
use File::Path;
use File::Slurp;
use Finance::Bank::ID::BCA;
use YAML;

use App::Options (
    option => {
        profile   => { type => 'string', required => 0, default => 'default' },
        account   => { type => 'string', required => 0, default => "" },
        username  => { type => 'string', required => 1 },
        password  => { type => 'string', required => 1 },
        data_dir  => { type => 'string', required => 1, default => File::HomeDir->my_home . "/bca" },
        log_dir   => { type => 'string', required => 1, default => File::HomeDir->my_home . "/bca/logs" },
        days      => { type => 'string', required => 0, default => 31 },
    },
);

use vars qw($Log_Level);
BEGIN { $Log_Level = "debug" }

use Log::Any::App '$log',
    -category_level => {Dumps=>'off'},
    -file           => {
        path           => "$App::options{log_dir}/main.log",
    },
    -dir            => {
        path           => "$App::options{log_dir}/dumps",
        level          => 'off',
        # currently we always dump, Log::Any::App > 0.23 will support specifying
        # sub { ... } to refer to general level
        category_level => {Dumps => 'trace'},
    };

mkpath($App::options{data_dir})                       unless (-d $App::options{data_dir});
die "Can't create data_dir `$App::options{data_dir}'" unless (-d $App::options{data_dir});

$log->info("Start session");

my $ibank = Finance::Bank::ID::BCA->new(
    username    => $App::options{username},
    password    => $App::options{password},
    logger      => $log,
    logger_dump => Log::Any->get_logger(category => "Dumps"),
    verify_https => 1,
);

eval {
    my @bal = $ibank->_check_balances;
    $log->debug("Balances: ".$ibank->_dmp(\@bal));

    my $stmt = $ibank->get_statement(
        account => $App::options{account},
        days => $App::options{days},
    );
    my $filename = sprintf "%s/bca.statement.%s.%s.to.%s.yaml",
        $App::options{data_dir},
        $stmt->{account},
        $stmt->{start_date}->ymd,
        $stmt->{end_date}->ymd;
    $log->info("Writing statements to YAML file `$filename' ...");

    # stringify DateTime objects so dump becomes simpler and shorter, the
    # $_[0]{seen} = {} is a trick to allow multiple places which mention the same
    # object to be converted (defeat circular checking)
    rmap_ref { $_[0]{seen} = {}; $_ = $_->ymd if UNIVERSAL::isa($_, "DateTime") } $stmt;

    write_file($filename, Dump($stmt));
};

if ($@) {
    $log->error("die: $@");
}

# no matter what, try to logout so we're not locked out for 10 minutes, annoying
eval { $ibank->logout; };

$log->info("End session");

__END__

=head1 SYNOPSIS

First, put your username and password in ~/.app/download-bca.conf, e.g.:

 [ALL]
 username = ABCDEF0123
 password = 123456

Then:

 $ download-bca


=head1 DESCRIPTION

This is a command-line script which you can run from cron or whatever to
conveniently download BCA statements. By default, it downloads a month's worth
of statements. Future version will allow options.


=head1 SEE ALSO

L<Finance::Bank::ID::BCA>

=cut
